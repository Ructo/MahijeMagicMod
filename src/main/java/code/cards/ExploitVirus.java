package code.cards;

import code.actions.FlipCardsAction;
import code.cards.abstractCards.AbstractFlipCard;
import com.megacrit.cardcrawl.actions.common.ApplyPowerAction;
import com.megacrit.cardcrawl.cards.AbstractCard;
import com.megacrit.cardcrawl.characters.AbstractPlayer;
import com.megacrit.cardcrawl.core.CardCrawlGame;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.localization.CardStrings;
import com.megacrit.cardcrawl.monsters.AbstractMonster;
import com.megacrit.cardcrawl.powers.FeeblePower;
import com.megacrit.cardcrawl.powers.VulnerablePower;

import static code.CharacterFile.Enums.TEAL_COLOR;
import static code.ModFile.makeID;

public class ExploitVirus extends AbstractFlipCard {
    public static final String ID = makeID("ExploitVirus");
    private static final CardStrings cardStrings = CardCrawlGame.languagePack.getCardStrings(ID);
    public ExploitVirus() {
        this(new ExploitPhish(null));
    }
    public ExploitVirus(AbstractFlipCard linkedCard) {
        super(ID, 2, CardType.SKILL, CardRarity.UNCOMMON, CardTarget.ENEMY, TEAL_COLOR);
        this.magicNumber = this.baseMagicNumber = 1;
        this.exhaust = true;
        if (linkedCard == null) {
            this.setLinkedCard(new ExploitPhish(this));
        } else {
            this.setLinkedCard(linkedCard);
        }
    }

    @Override
    public void use(AbstractPlayer p, AbstractMonster m) {
        AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(m, p, new VulnerablePower(m, this.magicNumber, false), this.magicNumber));
        // Apply 1 Feeble
        AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(m, p, new FeeblePower(m, 0), 1));


    }

    @Override
    public void upgrade() {
        if (!this.upgraded) {
            upgradeName();
            upgradeMagicNumber(1);
            this.rawDescription = cardStrings.UPGRADE_DESCRIPTION;
            this.initializeDescription();

        }
    }
    @Override
    public void onRightClick() {
        if (AbstractDungeon.player != null && !AbstractDungeon.isScreenUp) {
            AbstractCard newCard = this.cardsToPreview.makeStatEquivalentCopy();
            AbstractDungeon.actionManager.addToBottom(new FlipCardsAction(this, newCard));
        }
    }
    @Override
    public AbstractCard makeCopy() {
        return new ExploitVirus();
    }
}
